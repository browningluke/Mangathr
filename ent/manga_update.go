// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/browningluke/mangathr/v2/ent/chapter"
	"github.com/browningluke/mangathr/v2/ent/manga"
	"github.com/browningluke/mangathr/v2/ent/predicate"
)

// MangaUpdate is the builder for updating Manga entities.
type MangaUpdate struct {
	config
	hooks    []Hook
	mutation *MangaMutation
}

// Where appends a list predicates to the MangaUpdate builder.
func (mu *MangaUpdate) Where(ps ...predicate.Manga) *MangaUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetMangaID sets the "MangaID" field.
func (mu *MangaUpdate) SetMangaID(s string) *MangaUpdate {
	mu.mutation.SetMangaID(s)
	return mu
}

// SetNillableMangaID sets the "MangaID" field if the given value is not nil.
func (mu *MangaUpdate) SetNillableMangaID(s *string) *MangaUpdate {
	if s != nil {
		mu.SetMangaID(*s)
	}
	return mu
}

// SetSource sets the "Source" field.
func (mu *MangaUpdate) SetSource(s string) *MangaUpdate {
	mu.mutation.SetSource(s)
	return mu
}

// SetNillableSource sets the "Source" field if the given value is not nil.
func (mu *MangaUpdate) SetNillableSource(s *string) *MangaUpdate {
	if s != nil {
		mu.SetSource(*s)
	}
	return mu
}

// SetTitle sets the "Title" field.
func (mu *MangaUpdate) SetTitle(s string) *MangaUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetNillableTitle sets the "Title" field if the given value is not nil.
func (mu *MangaUpdate) SetNillableTitle(s *string) *MangaUpdate {
	if s != nil {
		mu.SetTitle(*s)
	}
	return mu
}

// SetMapping sets the "Mapping" field.
func (mu *MangaUpdate) SetMapping(s string) *MangaUpdate {
	mu.mutation.SetMapping(s)
	return mu
}

// SetNillableMapping sets the "Mapping" field if the given value is not nil.
func (mu *MangaUpdate) SetNillableMapping(s *string) *MangaUpdate {
	if s != nil {
		mu.SetMapping(*s)
	}
	return mu
}

// SetRegisteredOn sets the "RegisteredOn" field.
func (mu *MangaUpdate) SetRegisteredOn(t time.Time) *MangaUpdate {
	mu.mutation.SetRegisteredOn(t)
	return mu
}

// SetNillableRegisteredOn sets the "RegisteredOn" field if the given value is not nil.
func (mu *MangaUpdate) SetNillableRegisteredOn(t *time.Time) *MangaUpdate {
	if t != nil {
		mu.SetRegisteredOn(*t)
	}
	return mu
}

// SetFilteredGroups sets the "FilteredGroups" field.
func (mu *MangaUpdate) SetFilteredGroups(s []string) *MangaUpdate {
	mu.mutation.SetFilteredGroups(s)
	return mu
}

// AppendFilteredGroups appends s to the "FilteredGroups" field.
func (mu *MangaUpdate) AppendFilteredGroups(s []string) *MangaUpdate {
	mu.mutation.AppendFilteredGroups(s)
	return mu
}

// ClearFilteredGroups clears the value of the "FilteredGroups" field.
func (mu *MangaUpdate) ClearFilteredGroups() *MangaUpdate {
	mu.mutation.ClearFilteredGroups()
	return mu
}

// SetExcludedGroups sets the "ExcludedGroups" field.
func (mu *MangaUpdate) SetExcludedGroups(s []string) *MangaUpdate {
	mu.mutation.SetExcludedGroups(s)
	return mu
}

// AppendExcludedGroups appends s to the "ExcludedGroups" field.
func (mu *MangaUpdate) AppendExcludedGroups(s []string) *MangaUpdate {
	mu.mutation.AppendExcludedGroups(s)
	return mu
}

// ClearExcludedGroups clears the value of the "ExcludedGroups" field.
func (mu *MangaUpdate) ClearExcludedGroups() *MangaUpdate {
	mu.mutation.ClearExcludedGroups()
	return mu
}

// AddChapterIDs adds the "Chapters" edge to the Chapter entity by IDs.
func (mu *MangaUpdate) AddChapterIDs(ids ...int) *MangaUpdate {
	mu.mutation.AddChapterIDs(ids...)
	return mu
}

// AddChapters adds the "Chapters" edges to the Chapter entity.
func (mu *MangaUpdate) AddChapters(c ...*Chapter) *MangaUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.AddChapterIDs(ids...)
}

// Mutation returns the MangaMutation object of the builder.
func (mu *MangaUpdate) Mutation() *MangaMutation {
	return mu.mutation
}

// ClearChapters clears all "Chapters" edges to the Chapter entity.
func (mu *MangaUpdate) ClearChapters() *MangaUpdate {
	mu.mutation.ClearChapters()
	return mu
}

// RemoveChapterIDs removes the "Chapters" edge to Chapter entities by IDs.
func (mu *MangaUpdate) RemoveChapterIDs(ids ...int) *MangaUpdate {
	mu.mutation.RemoveChapterIDs(ids...)
	return mu
}

// RemoveChapters removes "Chapters" edges to Chapter entities.
func (mu *MangaUpdate) RemoveChapters(c ...*Chapter) *MangaUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.RemoveChapterIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MangaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MangaUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MangaUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MangaUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MangaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(manga.Table, manga.Columns, sqlgraph.NewFieldSpec(manga.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.MangaID(); ok {
		_spec.SetField(manga.FieldMangaID, field.TypeString, value)
	}
	if value, ok := mu.mutation.Source(); ok {
		_spec.SetField(manga.FieldSource, field.TypeString, value)
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.SetField(manga.FieldTitle, field.TypeString, value)
	}
	if value, ok := mu.mutation.Mapping(); ok {
		_spec.SetField(manga.FieldMapping, field.TypeString, value)
	}
	if value, ok := mu.mutation.RegisteredOn(); ok {
		_spec.SetField(manga.FieldRegisteredOn, field.TypeTime, value)
	}
	if value, ok := mu.mutation.FilteredGroups(); ok {
		_spec.SetField(manga.FieldFilteredGroups, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedFilteredGroups(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, manga.FieldFilteredGroups, value)
		})
	}
	if mu.mutation.FilteredGroupsCleared() {
		_spec.ClearField(manga.FieldFilteredGroups, field.TypeJSON)
	}
	if value, ok := mu.mutation.ExcludedGroups(); ok {
		_spec.SetField(manga.FieldExcludedGroups, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedExcludedGroups(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, manga.FieldExcludedGroups, value)
		})
	}
	if mu.mutation.ExcludedGroupsCleared() {
		_spec.ClearField(manga.FieldExcludedGroups, field.TypeJSON)
	}
	if mu.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   manga.ChaptersTable,
			Columns: []string{manga.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !mu.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   manga.ChaptersTable,
			Columns: []string{manga.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   manga.ChaptersTable,
			Columns: []string{manga.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manga.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MangaUpdateOne is the builder for updating a single Manga entity.
type MangaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MangaMutation
}

// SetMangaID sets the "MangaID" field.
func (muo *MangaUpdateOne) SetMangaID(s string) *MangaUpdateOne {
	muo.mutation.SetMangaID(s)
	return muo
}

// SetNillableMangaID sets the "MangaID" field if the given value is not nil.
func (muo *MangaUpdateOne) SetNillableMangaID(s *string) *MangaUpdateOne {
	if s != nil {
		muo.SetMangaID(*s)
	}
	return muo
}

// SetSource sets the "Source" field.
func (muo *MangaUpdateOne) SetSource(s string) *MangaUpdateOne {
	muo.mutation.SetSource(s)
	return muo
}

// SetNillableSource sets the "Source" field if the given value is not nil.
func (muo *MangaUpdateOne) SetNillableSource(s *string) *MangaUpdateOne {
	if s != nil {
		muo.SetSource(*s)
	}
	return muo
}

// SetTitle sets the "Title" field.
func (muo *MangaUpdateOne) SetTitle(s string) *MangaUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetNillableTitle sets the "Title" field if the given value is not nil.
func (muo *MangaUpdateOne) SetNillableTitle(s *string) *MangaUpdateOne {
	if s != nil {
		muo.SetTitle(*s)
	}
	return muo
}

// SetMapping sets the "Mapping" field.
func (muo *MangaUpdateOne) SetMapping(s string) *MangaUpdateOne {
	muo.mutation.SetMapping(s)
	return muo
}

// SetNillableMapping sets the "Mapping" field if the given value is not nil.
func (muo *MangaUpdateOne) SetNillableMapping(s *string) *MangaUpdateOne {
	if s != nil {
		muo.SetMapping(*s)
	}
	return muo
}

// SetRegisteredOn sets the "RegisteredOn" field.
func (muo *MangaUpdateOne) SetRegisteredOn(t time.Time) *MangaUpdateOne {
	muo.mutation.SetRegisteredOn(t)
	return muo
}

// SetNillableRegisteredOn sets the "RegisteredOn" field if the given value is not nil.
func (muo *MangaUpdateOne) SetNillableRegisteredOn(t *time.Time) *MangaUpdateOne {
	if t != nil {
		muo.SetRegisteredOn(*t)
	}
	return muo
}

// SetFilteredGroups sets the "FilteredGroups" field.
func (muo *MangaUpdateOne) SetFilteredGroups(s []string) *MangaUpdateOne {
	muo.mutation.SetFilteredGroups(s)
	return muo
}

// AppendFilteredGroups appends s to the "FilteredGroups" field.
func (muo *MangaUpdateOne) AppendFilteredGroups(s []string) *MangaUpdateOne {
	muo.mutation.AppendFilteredGroups(s)
	return muo
}

// ClearFilteredGroups clears the value of the "FilteredGroups" field.
func (muo *MangaUpdateOne) ClearFilteredGroups() *MangaUpdateOne {
	muo.mutation.ClearFilteredGroups()
	return muo
}

// SetExcludedGroups sets the "ExcludedGroups" field.
func (muo *MangaUpdateOne) SetExcludedGroups(s []string) *MangaUpdateOne {
	muo.mutation.SetExcludedGroups(s)
	return muo
}

// AppendExcludedGroups appends s to the "ExcludedGroups" field.
func (muo *MangaUpdateOne) AppendExcludedGroups(s []string) *MangaUpdateOne {
	muo.mutation.AppendExcludedGroups(s)
	return muo
}

// ClearExcludedGroups clears the value of the "ExcludedGroups" field.
func (muo *MangaUpdateOne) ClearExcludedGroups() *MangaUpdateOne {
	muo.mutation.ClearExcludedGroups()
	return muo
}

// AddChapterIDs adds the "Chapters" edge to the Chapter entity by IDs.
func (muo *MangaUpdateOne) AddChapterIDs(ids ...int) *MangaUpdateOne {
	muo.mutation.AddChapterIDs(ids...)
	return muo
}

// AddChapters adds the "Chapters" edges to the Chapter entity.
func (muo *MangaUpdateOne) AddChapters(c ...*Chapter) *MangaUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.AddChapterIDs(ids...)
}

// Mutation returns the MangaMutation object of the builder.
func (muo *MangaUpdateOne) Mutation() *MangaMutation {
	return muo.mutation
}

// ClearChapters clears all "Chapters" edges to the Chapter entity.
func (muo *MangaUpdateOne) ClearChapters() *MangaUpdateOne {
	muo.mutation.ClearChapters()
	return muo
}

// RemoveChapterIDs removes the "Chapters" edge to Chapter entities by IDs.
func (muo *MangaUpdateOne) RemoveChapterIDs(ids ...int) *MangaUpdateOne {
	muo.mutation.RemoveChapterIDs(ids...)
	return muo
}

// RemoveChapters removes "Chapters" edges to Chapter entities.
func (muo *MangaUpdateOne) RemoveChapters(c ...*Chapter) *MangaUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.RemoveChapterIDs(ids...)
}

// Where appends a list predicates to the MangaUpdate builder.
func (muo *MangaUpdateOne) Where(ps ...predicate.Manga) *MangaUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MangaUpdateOne) Select(field string, fields ...string) *MangaUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Manga entity.
func (muo *MangaUpdateOne) Save(ctx context.Context) (*Manga, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MangaUpdateOne) SaveX(ctx context.Context) *Manga {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MangaUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MangaUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MangaUpdateOne) sqlSave(ctx context.Context) (_node *Manga, err error) {
	_spec := sqlgraph.NewUpdateSpec(manga.Table, manga.Columns, sqlgraph.NewFieldSpec(manga.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Manga.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, manga.FieldID)
		for _, f := range fields {
			if !manga.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != manga.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.MangaID(); ok {
		_spec.SetField(manga.FieldMangaID, field.TypeString, value)
	}
	if value, ok := muo.mutation.Source(); ok {
		_spec.SetField(manga.FieldSource, field.TypeString, value)
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.SetField(manga.FieldTitle, field.TypeString, value)
	}
	if value, ok := muo.mutation.Mapping(); ok {
		_spec.SetField(manga.FieldMapping, field.TypeString, value)
	}
	if value, ok := muo.mutation.RegisteredOn(); ok {
		_spec.SetField(manga.FieldRegisteredOn, field.TypeTime, value)
	}
	if value, ok := muo.mutation.FilteredGroups(); ok {
		_spec.SetField(manga.FieldFilteredGroups, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedFilteredGroups(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, manga.FieldFilteredGroups, value)
		})
	}
	if muo.mutation.FilteredGroupsCleared() {
		_spec.ClearField(manga.FieldFilteredGroups, field.TypeJSON)
	}
	if value, ok := muo.mutation.ExcludedGroups(); ok {
		_spec.SetField(manga.FieldExcludedGroups, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedExcludedGroups(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, manga.FieldExcludedGroups, value)
		})
	}
	if muo.mutation.ExcludedGroupsCleared() {
		_spec.ClearField(manga.FieldExcludedGroups, field.TypeJSON)
	}
	if muo.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   manga.ChaptersTable,
			Columns: []string{manga.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !muo.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   manga.ChaptersTable,
			Columns: []string{manga.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   manga.ChaptersTable,
			Columns: []string{manga.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Manga{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manga.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
