// Code generated by entc, DO NOT EDIT.

package manga

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/browningluke/mangathrV2/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// MangaID applies equality check predicate on the "MangaID" field. It's identical to MangaIDEQ.
func MangaID(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMangaID), v))
	})
}

// Source applies equality check predicate on the "Source" field. It's identical to SourceEQ.
func Source(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSource), v))
	})
}

// Title applies equality check predicate on the "Title" field. It's identical to TitleEQ.
func Title(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Mapping applies equality check predicate on the "Mapping" field. It's identical to MappingEQ.
func Mapping(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMapping), v))
	})
}

// RegisteredOn applies equality check predicate on the "RegisteredOn" field. It's identical to RegisteredOnEQ.
func RegisteredOn(v time.Time) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisteredOn), v))
	})
}

// MangaIDEQ applies the EQ predicate on the "MangaID" field.
func MangaIDEQ(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMangaID), v))
	})
}

// MangaIDNEQ applies the NEQ predicate on the "MangaID" field.
func MangaIDNEQ(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMangaID), v))
	})
}

// MangaIDIn applies the In predicate on the "MangaID" field.
func MangaIDIn(vs ...string) predicate.Manga {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Manga(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMangaID), v...))
	})
}

// MangaIDNotIn applies the NotIn predicate on the "MangaID" field.
func MangaIDNotIn(vs ...string) predicate.Manga {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Manga(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMangaID), v...))
	})
}

// MangaIDGT applies the GT predicate on the "MangaID" field.
func MangaIDGT(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMangaID), v))
	})
}

// MangaIDGTE applies the GTE predicate on the "MangaID" field.
func MangaIDGTE(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMangaID), v))
	})
}

// MangaIDLT applies the LT predicate on the "MangaID" field.
func MangaIDLT(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMangaID), v))
	})
}

// MangaIDLTE applies the LTE predicate on the "MangaID" field.
func MangaIDLTE(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMangaID), v))
	})
}

// MangaIDContains applies the Contains predicate on the "MangaID" field.
func MangaIDContains(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMangaID), v))
	})
}

// MangaIDHasPrefix applies the HasPrefix predicate on the "MangaID" field.
func MangaIDHasPrefix(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMangaID), v))
	})
}

// MangaIDHasSuffix applies the HasSuffix predicate on the "MangaID" field.
func MangaIDHasSuffix(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMangaID), v))
	})
}

// MangaIDEqualFold applies the EqualFold predicate on the "MangaID" field.
func MangaIDEqualFold(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMangaID), v))
	})
}

// MangaIDContainsFold applies the ContainsFold predicate on the "MangaID" field.
func MangaIDContainsFold(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMangaID), v))
	})
}

// SourceEQ applies the EQ predicate on the "Source" field.
func SourceEQ(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSource), v))
	})
}

// SourceNEQ applies the NEQ predicate on the "Source" field.
func SourceNEQ(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSource), v))
	})
}

// SourceIn applies the In predicate on the "Source" field.
func SourceIn(vs ...string) predicate.Manga {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Manga(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSource), v...))
	})
}

// SourceNotIn applies the NotIn predicate on the "Source" field.
func SourceNotIn(vs ...string) predicate.Manga {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Manga(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSource), v...))
	})
}

// SourceGT applies the GT predicate on the "Source" field.
func SourceGT(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSource), v))
	})
}

// SourceGTE applies the GTE predicate on the "Source" field.
func SourceGTE(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSource), v))
	})
}

// SourceLT applies the LT predicate on the "Source" field.
func SourceLT(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSource), v))
	})
}

// SourceLTE applies the LTE predicate on the "Source" field.
func SourceLTE(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSource), v))
	})
}

// SourceContains applies the Contains predicate on the "Source" field.
func SourceContains(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSource), v))
	})
}

// SourceHasPrefix applies the HasPrefix predicate on the "Source" field.
func SourceHasPrefix(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSource), v))
	})
}

// SourceHasSuffix applies the HasSuffix predicate on the "Source" field.
func SourceHasSuffix(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSource), v))
	})
}

// SourceEqualFold applies the EqualFold predicate on the "Source" field.
func SourceEqualFold(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSource), v))
	})
}

// SourceContainsFold applies the ContainsFold predicate on the "Source" field.
func SourceContainsFold(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSource), v))
	})
}

// TitleEQ applies the EQ predicate on the "Title" field.
func TitleEQ(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "Title" field.
func TitleNEQ(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "Title" field.
func TitleIn(vs ...string) predicate.Manga {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Manga(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "Title" field.
func TitleNotIn(vs ...string) predicate.Manga {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Manga(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "Title" field.
func TitleGT(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "Title" field.
func TitleGTE(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "Title" field.
func TitleLT(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "Title" field.
func TitleLTE(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "Title" field.
func TitleContains(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "Title" field.
func TitleHasPrefix(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "Title" field.
func TitleHasSuffix(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "Title" field.
func TitleEqualFold(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "Title" field.
func TitleContainsFold(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// MappingEQ applies the EQ predicate on the "Mapping" field.
func MappingEQ(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMapping), v))
	})
}

// MappingNEQ applies the NEQ predicate on the "Mapping" field.
func MappingNEQ(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMapping), v))
	})
}

// MappingIn applies the In predicate on the "Mapping" field.
func MappingIn(vs ...string) predicate.Manga {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Manga(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMapping), v...))
	})
}

// MappingNotIn applies the NotIn predicate on the "Mapping" field.
func MappingNotIn(vs ...string) predicate.Manga {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Manga(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMapping), v...))
	})
}

// MappingGT applies the GT predicate on the "Mapping" field.
func MappingGT(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMapping), v))
	})
}

// MappingGTE applies the GTE predicate on the "Mapping" field.
func MappingGTE(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMapping), v))
	})
}

// MappingLT applies the LT predicate on the "Mapping" field.
func MappingLT(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMapping), v))
	})
}

// MappingLTE applies the LTE predicate on the "Mapping" field.
func MappingLTE(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMapping), v))
	})
}

// MappingContains applies the Contains predicate on the "Mapping" field.
func MappingContains(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMapping), v))
	})
}

// MappingHasPrefix applies the HasPrefix predicate on the "Mapping" field.
func MappingHasPrefix(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMapping), v))
	})
}

// MappingHasSuffix applies the HasSuffix predicate on the "Mapping" field.
func MappingHasSuffix(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMapping), v))
	})
}

// MappingEqualFold applies the EqualFold predicate on the "Mapping" field.
func MappingEqualFold(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMapping), v))
	})
}

// MappingContainsFold applies the ContainsFold predicate on the "Mapping" field.
func MappingContainsFold(v string) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMapping), v))
	})
}

// RegisteredOnEQ applies the EQ predicate on the "RegisteredOn" field.
func RegisteredOnEQ(v time.Time) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegisteredOn), v))
	})
}

// RegisteredOnNEQ applies the NEQ predicate on the "RegisteredOn" field.
func RegisteredOnNEQ(v time.Time) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegisteredOn), v))
	})
}

// RegisteredOnIn applies the In predicate on the "RegisteredOn" field.
func RegisteredOnIn(vs ...time.Time) predicate.Manga {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Manga(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegisteredOn), v...))
	})
}

// RegisteredOnNotIn applies the NotIn predicate on the "RegisteredOn" field.
func RegisteredOnNotIn(vs ...time.Time) predicate.Manga {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Manga(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegisteredOn), v...))
	})
}

// RegisteredOnGT applies the GT predicate on the "RegisteredOn" field.
func RegisteredOnGT(v time.Time) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegisteredOn), v))
	})
}

// RegisteredOnGTE applies the GTE predicate on the "RegisteredOn" field.
func RegisteredOnGTE(v time.Time) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegisteredOn), v))
	})
}

// RegisteredOnLT applies the LT predicate on the "RegisteredOn" field.
func RegisteredOnLT(v time.Time) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegisteredOn), v))
	})
}

// RegisteredOnLTE applies the LTE predicate on the "RegisteredOn" field.
func RegisteredOnLTE(v time.Time) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegisteredOn), v))
	})
}

// HasChapters applies the HasEdge predicate on the "Chapters" edge.
func HasChapters() predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChaptersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChaptersTable, ChaptersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChaptersWith applies the HasEdge predicate on the "Chapters" edge with a given conditions (other predicates).
func HasChaptersWith(preds ...predicate.Chapter) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChaptersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChaptersTable, ChaptersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Manga) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Manga) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Manga) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		p(s.Not())
	})
}
