// Code generated by ent, DO NOT EDIT.

package manga

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/browningluke/mangathr/v2/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Manga {
	return predicate.Manga(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Manga {
	return predicate.Manga(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Manga {
	return predicate.Manga(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Manga {
	return predicate.Manga(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Manga {
	return predicate.Manga(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Manga {
	return predicate.Manga(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Manga {
	return predicate.Manga(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Manga {
	return predicate.Manga(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Manga {
	return predicate.Manga(sql.FieldLTE(FieldID, id))
}

// MangaID applies equality check predicate on the "MangaID" field. It's identical to MangaIDEQ.
func MangaID(v string) predicate.Manga {
	return predicate.Manga(sql.FieldEQ(FieldMangaID, v))
}

// Source applies equality check predicate on the "Source" field. It's identical to SourceEQ.
func Source(v string) predicate.Manga {
	return predicate.Manga(sql.FieldEQ(FieldSource, v))
}

// Title applies equality check predicate on the "Title" field. It's identical to TitleEQ.
func Title(v string) predicate.Manga {
	return predicate.Manga(sql.FieldEQ(FieldTitle, v))
}

// Mapping applies equality check predicate on the "Mapping" field. It's identical to MappingEQ.
func Mapping(v string) predicate.Manga {
	return predicate.Manga(sql.FieldEQ(FieldMapping, v))
}

// RegisteredOn applies equality check predicate on the "RegisteredOn" field. It's identical to RegisteredOnEQ.
func RegisteredOn(v time.Time) predicate.Manga {
	return predicate.Manga(sql.FieldEQ(FieldRegisteredOn, v))
}

// MangaIDEQ applies the EQ predicate on the "MangaID" field.
func MangaIDEQ(v string) predicate.Manga {
	return predicate.Manga(sql.FieldEQ(FieldMangaID, v))
}

// MangaIDNEQ applies the NEQ predicate on the "MangaID" field.
func MangaIDNEQ(v string) predicate.Manga {
	return predicate.Manga(sql.FieldNEQ(FieldMangaID, v))
}

// MangaIDIn applies the In predicate on the "MangaID" field.
func MangaIDIn(vs ...string) predicate.Manga {
	return predicate.Manga(sql.FieldIn(FieldMangaID, vs...))
}

// MangaIDNotIn applies the NotIn predicate on the "MangaID" field.
func MangaIDNotIn(vs ...string) predicate.Manga {
	return predicate.Manga(sql.FieldNotIn(FieldMangaID, vs...))
}

// MangaIDGT applies the GT predicate on the "MangaID" field.
func MangaIDGT(v string) predicate.Manga {
	return predicate.Manga(sql.FieldGT(FieldMangaID, v))
}

// MangaIDGTE applies the GTE predicate on the "MangaID" field.
func MangaIDGTE(v string) predicate.Manga {
	return predicate.Manga(sql.FieldGTE(FieldMangaID, v))
}

// MangaIDLT applies the LT predicate on the "MangaID" field.
func MangaIDLT(v string) predicate.Manga {
	return predicate.Manga(sql.FieldLT(FieldMangaID, v))
}

// MangaIDLTE applies the LTE predicate on the "MangaID" field.
func MangaIDLTE(v string) predicate.Manga {
	return predicate.Manga(sql.FieldLTE(FieldMangaID, v))
}

// MangaIDContains applies the Contains predicate on the "MangaID" field.
func MangaIDContains(v string) predicate.Manga {
	return predicate.Manga(sql.FieldContains(FieldMangaID, v))
}

// MangaIDHasPrefix applies the HasPrefix predicate on the "MangaID" field.
func MangaIDHasPrefix(v string) predicate.Manga {
	return predicate.Manga(sql.FieldHasPrefix(FieldMangaID, v))
}

// MangaIDHasSuffix applies the HasSuffix predicate on the "MangaID" field.
func MangaIDHasSuffix(v string) predicate.Manga {
	return predicate.Manga(sql.FieldHasSuffix(FieldMangaID, v))
}

// MangaIDEqualFold applies the EqualFold predicate on the "MangaID" field.
func MangaIDEqualFold(v string) predicate.Manga {
	return predicate.Manga(sql.FieldEqualFold(FieldMangaID, v))
}

// MangaIDContainsFold applies the ContainsFold predicate on the "MangaID" field.
func MangaIDContainsFold(v string) predicate.Manga {
	return predicate.Manga(sql.FieldContainsFold(FieldMangaID, v))
}

// SourceEQ applies the EQ predicate on the "Source" field.
func SourceEQ(v string) predicate.Manga {
	return predicate.Manga(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "Source" field.
func SourceNEQ(v string) predicate.Manga {
	return predicate.Manga(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "Source" field.
func SourceIn(vs ...string) predicate.Manga {
	return predicate.Manga(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "Source" field.
func SourceNotIn(vs ...string) predicate.Manga {
	return predicate.Manga(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "Source" field.
func SourceGT(v string) predicate.Manga {
	return predicate.Manga(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "Source" field.
func SourceGTE(v string) predicate.Manga {
	return predicate.Manga(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "Source" field.
func SourceLT(v string) predicate.Manga {
	return predicate.Manga(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "Source" field.
func SourceLTE(v string) predicate.Manga {
	return predicate.Manga(sql.FieldLTE(FieldSource, v))
}

// SourceContains applies the Contains predicate on the "Source" field.
func SourceContains(v string) predicate.Manga {
	return predicate.Manga(sql.FieldContains(FieldSource, v))
}

// SourceHasPrefix applies the HasPrefix predicate on the "Source" field.
func SourceHasPrefix(v string) predicate.Manga {
	return predicate.Manga(sql.FieldHasPrefix(FieldSource, v))
}

// SourceHasSuffix applies the HasSuffix predicate on the "Source" field.
func SourceHasSuffix(v string) predicate.Manga {
	return predicate.Manga(sql.FieldHasSuffix(FieldSource, v))
}

// SourceEqualFold applies the EqualFold predicate on the "Source" field.
func SourceEqualFold(v string) predicate.Manga {
	return predicate.Manga(sql.FieldEqualFold(FieldSource, v))
}

// SourceContainsFold applies the ContainsFold predicate on the "Source" field.
func SourceContainsFold(v string) predicate.Manga {
	return predicate.Manga(sql.FieldContainsFold(FieldSource, v))
}

// TitleEQ applies the EQ predicate on the "Title" field.
func TitleEQ(v string) predicate.Manga {
	return predicate.Manga(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "Title" field.
func TitleNEQ(v string) predicate.Manga {
	return predicate.Manga(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "Title" field.
func TitleIn(vs ...string) predicate.Manga {
	return predicate.Manga(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "Title" field.
func TitleNotIn(vs ...string) predicate.Manga {
	return predicate.Manga(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "Title" field.
func TitleGT(v string) predicate.Manga {
	return predicate.Manga(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "Title" field.
func TitleGTE(v string) predicate.Manga {
	return predicate.Manga(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "Title" field.
func TitleLT(v string) predicate.Manga {
	return predicate.Manga(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "Title" field.
func TitleLTE(v string) predicate.Manga {
	return predicate.Manga(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "Title" field.
func TitleContains(v string) predicate.Manga {
	return predicate.Manga(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "Title" field.
func TitleHasPrefix(v string) predicate.Manga {
	return predicate.Manga(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "Title" field.
func TitleHasSuffix(v string) predicate.Manga {
	return predicate.Manga(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "Title" field.
func TitleEqualFold(v string) predicate.Manga {
	return predicate.Manga(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "Title" field.
func TitleContainsFold(v string) predicate.Manga {
	return predicate.Manga(sql.FieldContainsFold(FieldTitle, v))
}

// MappingEQ applies the EQ predicate on the "Mapping" field.
func MappingEQ(v string) predicate.Manga {
	return predicate.Manga(sql.FieldEQ(FieldMapping, v))
}

// MappingNEQ applies the NEQ predicate on the "Mapping" field.
func MappingNEQ(v string) predicate.Manga {
	return predicate.Manga(sql.FieldNEQ(FieldMapping, v))
}

// MappingIn applies the In predicate on the "Mapping" field.
func MappingIn(vs ...string) predicate.Manga {
	return predicate.Manga(sql.FieldIn(FieldMapping, vs...))
}

// MappingNotIn applies the NotIn predicate on the "Mapping" field.
func MappingNotIn(vs ...string) predicate.Manga {
	return predicate.Manga(sql.FieldNotIn(FieldMapping, vs...))
}

// MappingGT applies the GT predicate on the "Mapping" field.
func MappingGT(v string) predicate.Manga {
	return predicate.Manga(sql.FieldGT(FieldMapping, v))
}

// MappingGTE applies the GTE predicate on the "Mapping" field.
func MappingGTE(v string) predicate.Manga {
	return predicate.Manga(sql.FieldGTE(FieldMapping, v))
}

// MappingLT applies the LT predicate on the "Mapping" field.
func MappingLT(v string) predicate.Manga {
	return predicate.Manga(sql.FieldLT(FieldMapping, v))
}

// MappingLTE applies the LTE predicate on the "Mapping" field.
func MappingLTE(v string) predicate.Manga {
	return predicate.Manga(sql.FieldLTE(FieldMapping, v))
}

// MappingContains applies the Contains predicate on the "Mapping" field.
func MappingContains(v string) predicate.Manga {
	return predicate.Manga(sql.FieldContains(FieldMapping, v))
}

// MappingHasPrefix applies the HasPrefix predicate on the "Mapping" field.
func MappingHasPrefix(v string) predicate.Manga {
	return predicate.Manga(sql.FieldHasPrefix(FieldMapping, v))
}

// MappingHasSuffix applies the HasSuffix predicate on the "Mapping" field.
func MappingHasSuffix(v string) predicate.Manga {
	return predicate.Manga(sql.FieldHasSuffix(FieldMapping, v))
}

// MappingEqualFold applies the EqualFold predicate on the "Mapping" field.
func MappingEqualFold(v string) predicate.Manga {
	return predicate.Manga(sql.FieldEqualFold(FieldMapping, v))
}

// MappingContainsFold applies the ContainsFold predicate on the "Mapping" field.
func MappingContainsFold(v string) predicate.Manga {
	return predicate.Manga(sql.FieldContainsFold(FieldMapping, v))
}

// RegisteredOnEQ applies the EQ predicate on the "RegisteredOn" field.
func RegisteredOnEQ(v time.Time) predicate.Manga {
	return predicate.Manga(sql.FieldEQ(FieldRegisteredOn, v))
}

// RegisteredOnNEQ applies the NEQ predicate on the "RegisteredOn" field.
func RegisteredOnNEQ(v time.Time) predicate.Manga {
	return predicate.Manga(sql.FieldNEQ(FieldRegisteredOn, v))
}

// RegisteredOnIn applies the In predicate on the "RegisteredOn" field.
func RegisteredOnIn(vs ...time.Time) predicate.Manga {
	return predicate.Manga(sql.FieldIn(FieldRegisteredOn, vs...))
}

// RegisteredOnNotIn applies the NotIn predicate on the "RegisteredOn" field.
func RegisteredOnNotIn(vs ...time.Time) predicate.Manga {
	return predicate.Manga(sql.FieldNotIn(FieldRegisteredOn, vs...))
}

// RegisteredOnGT applies the GT predicate on the "RegisteredOn" field.
func RegisteredOnGT(v time.Time) predicate.Manga {
	return predicate.Manga(sql.FieldGT(FieldRegisteredOn, v))
}

// RegisteredOnGTE applies the GTE predicate on the "RegisteredOn" field.
func RegisteredOnGTE(v time.Time) predicate.Manga {
	return predicate.Manga(sql.FieldGTE(FieldRegisteredOn, v))
}

// RegisteredOnLT applies the LT predicate on the "RegisteredOn" field.
func RegisteredOnLT(v time.Time) predicate.Manga {
	return predicate.Manga(sql.FieldLT(FieldRegisteredOn, v))
}

// RegisteredOnLTE applies the LTE predicate on the "RegisteredOn" field.
func RegisteredOnLTE(v time.Time) predicate.Manga {
	return predicate.Manga(sql.FieldLTE(FieldRegisteredOn, v))
}

// HasChapters applies the HasEdge predicate on the "Chapters" edge.
func HasChapters() predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChaptersTable, ChaptersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChaptersWith applies the HasEdge predicate on the "Chapters" edge with a given conditions (other predicates).
func HasChaptersWith(preds ...predicate.Chapter) predicate.Manga {
	return predicate.Manga(func(s *sql.Selector) {
		step := newChaptersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Manga) predicate.Manga {
	return predicate.Manga(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Manga) predicate.Manga {
	return predicate.Manga(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Manga) predicate.Manga {
	return predicate.Manga(sql.NotPredicates(p))
}
