// Code generated by ent, DO NOT EDIT.

package manga

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the manga type in the database.
	Label = "manga"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMangaID holds the string denoting the mangaid field in the database.
	FieldMangaID = "manga_id"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldMapping holds the string denoting the mapping field in the database.
	FieldMapping = "mapping"
	// FieldRegisteredOn holds the string denoting the registeredon field in the database.
	FieldRegisteredOn = "registered_on"
	// FieldFilteredGroups holds the string denoting the filteredgroups field in the database.
	FieldFilteredGroups = "filtered_groups"
	// FieldExcludedGroups holds the string denoting the excludedgroups field in the database.
	FieldExcludedGroups = "excluded_groups"
	// EdgeChapters holds the string denoting the chapters edge name in mutations.
	EdgeChapters = "Chapters"
	// Table holds the table name of the manga in the database.
	Table = "mangas"
	// ChaptersTable is the table that holds the Chapters relation/edge.
	ChaptersTable = "chapters"
	// ChaptersInverseTable is the table name for the Chapter entity.
	// It exists in this package in order to avoid circular dependency with the "chapter" package.
	ChaptersInverseTable = "chapters"
	// ChaptersColumn is the table column denoting the Chapters relation/edge.
	ChaptersColumn = "manga_chapters"
)

// Columns holds all SQL columns for manga fields.
var Columns = []string{
	FieldID,
	FieldMangaID,
	FieldSource,
	FieldTitle,
	FieldMapping,
	FieldRegisteredOn,
	FieldFilteredGroups,
	FieldExcludedGroups,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Manga queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMangaID orders the results by the MangaID field.
func ByMangaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMangaID, opts...).ToFunc()
}

// BySource orders the results by the Source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByTitle orders the results by the Title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByMapping orders the results by the Mapping field.
func ByMapping(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMapping, opts...).ToFunc()
}

// ByRegisteredOn orders the results by the RegisteredOn field.
func ByRegisteredOn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegisteredOn, opts...).ToFunc()
}

// ByChaptersCount orders the results by Chapters count.
func ByChaptersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChaptersStep(), opts...)
	}
}

// ByChapters orders the results by Chapters terms.
func ByChapters(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChaptersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newChaptersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChaptersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChaptersTable, ChaptersColumn),
	)
}
