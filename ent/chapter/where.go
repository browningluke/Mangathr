// Code generated by entc, DO NOT EDIT.

package chapter

import (
	"mangathrV2/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ChapterID applies equality check predicate on the "ChapterID" field. It's identical to ChapterIDEQ.
func ChapterID(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterID), v))
	})
}

// Num applies equality check predicate on the "Num" field. It's identical to NumEQ.
func Num(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNum), v))
	})
}

// ChapterIDEQ applies the EQ predicate on the "ChapterID" field.
func ChapterIDEQ(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterID), v))
	})
}

// ChapterIDNEQ applies the NEQ predicate on the "ChapterID" field.
func ChapterIDNEQ(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChapterID), v))
	})
}

// ChapterIDIn applies the In predicate on the "ChapterID" field.
func ChapterIDIn(vs ...string) predicate.Chapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChapterID), v...))
	})
}

// ChapterIDNotIn applies the NotIn predicate on the "ChapterID" field.
func ChapterIDNotIn(vs ...string) predicate.Chapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChapterID), v...))
	})
}

// ChapterIDGT applies the GT predicate on the "ChapterID" field.
func ChapterIDGT(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChapterID), v))
	})
}

// ChapterIDGTE applies the GTE predicate on the "ChapterID" field.
func ChapterIDGTE(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChapterID), v))
	})
}

// ChapterIDLT applies the LT predicate on the "ChapterID" field.
func ChapterIDLT(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChapterID), v))
	})
}

// ChapterIDLTE applies the LTE predicate on the "ChapterID" field.
func ChapterIDLTE(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChapterID), v))
	})
}

// ChapterIDContains applies the Contains predicate on the "ChapterID" field.
func ChapterIDContains(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChapterID), v))
	})
}

// ChapterIDHasPrefix applies the HasPrefix predicate on the "ChapterID" field.
func ChapterIDHasPrefix(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChapterID), v))
	})
}

// ChapterIDHasSuffix applies the HasSuffix predicate on the "ChapterID" field.
func ChapterIDHasSuffix(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChapterID), v))
	})
}

// ChapterIDEqualFold applies the EqualFold predicate on the "ChapterID" field.
func ChapterIDEqualFold(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChapterID), v))
	})
}

// ChapterIDContainsFold applies the ContainsFold predicate on the "ChapterID" field.
func ChapterIDContainsFold(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChapterID), v))
	})
}

// NumEQ applies the EQ predicate on the "Num" field.
func NumEQ(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNum), v))
	})
}

// NumNEQ applies the NEQ predicate on the "Num" field.
func NumNEQ(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNum), v))
	})
}

// NumIn applies the In predicate on the "Num" field.
func NumIn(vs ...string) predicate.Chapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNum), v...))
	})
}

// NumNotIn applies the NotIn predicate on the "Num" field.
func NumNotIn(vs ...string) predicate.Chapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNum), v...))
	})
}

// NumGT applies the GT predicate on the "Num" field.
func NumGT(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNum), v))
	})
}

// NumGTE applies the GTE predicate on the "Num" field.
func NumGTE(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNum), v))
	})
}

// NumLT applies the LT predicate on the "Num" field.
func NumLT(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNum), v))
	})
}

// NumLTE applies the LTE predicate on the "Num" field.
func NumLTE(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNum), v))
	})
}

// NumContains applies the Contains predicate on the "Num" field.
func NumContains(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNum), v))
	})
}

// NumHasPrefix applies the HasPrefix predicate on the "Num" field.
func NumHasPrefix(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNum), v))
	})
}

// NumHasSuffix applies the HasSuffix predicate on the "Num" field.
func NumHasSuffix(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNum), v))
	})
}

// NumEqualFold applies the EqualFold predicate on the "Num" field.
func NumEqualFold(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNum), v))
	})
}

// NumContainsFold applies the ContainsFold predicate on the "Num" field.
func NumContainsFold(v string) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNum), v))
	})
}

// HasManga applies the HasEdge predicate on the "Manga" edge.
func HasManga() predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MangaTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MangaTable, MangaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMangaWith applies the HasEdge predicate on the "Manga" edge with a given conditions (other predicates).
func HasMangaWith(preds ...predicate.Manga) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MangaInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MangaTable, MangaColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Chapter) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Chapter) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Chapter) predicate.Chapter {
	return predicate.Chapter(func(s *sql.Selector) {
		p(s.Not())
	})
}
