// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"mangathrV2/ent/chapter"
	"mangathrV2/ent/manga"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Chapter is the model entity for the Chapter schema.
type Chapter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ChapterID holds the value of the "ChapterID" field.
	ChapterID string `json:"ChapterID,omitempty"`
	// Num holds the value of the "Num" field.
	Num string `json:"Num,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChapterQuery when eager-loading is set.
	Edges          ChapterEdges `json:"edges"`
	manga_chapters *int
}

// ChapterEdges holds the relations/edges for other nodes in the graph.
type ChapterEdges struct {
	// Manga holds the value of the Manga edge.
	Manga *Manga `json:"Manga,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MangaOrErr returns the Manga value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChapterEdges) MangaOrErr() (*Manga, error) {
	if e.loadedTypes[0] {
		if e.Manga == nil {
			// The edge Manga was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: manga.Label}
		}
		return e.Manga, nil
	}
	return nil, &NotLoadedError{edge: "Manga"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Chapter) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case chapter.FieldID:
			values[i] = new(sql.NullInt64)
		case chapter.FieldChapterID, chapter.FieldNum:
			values[i] = new(sql.NullString)
		case chapter.ForeignKeys[0]: // manga_chapters
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Chapter", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Chapter fields.
func (c *Chapter) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chapter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case chapter.FieldChapterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ChapterID", values[i])
			} else if value.Valid {
				c.ChapterID = value.String
			}
		case chapter.FieldNum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Num", values[i])
			} else if value.Valid {
				c.Num = value.String
			}
		case chapter.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field manga_chapters", value)
			} else if value.Valid {
				c.manga_chapters = new(int)
				*c.manga_chapters = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryManga queries the "Manga" edge of the Chapter entity.
func (c *Chapter) QueryManga() *MangaQuery {
	return (&ChapterClient{config: c.config}).QueryManga(c)
}

// Update returns a builder for updating this Chapter.
// Note that you need to call Chapter.Unwrap() before calling this method if this Chapter
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Chapter) Update() *ChapterUpdateOne {
	return (&ChapterClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Chapter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Chapter) Unwrap() *Chapter {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Chapter is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Chapter) String() string {
	var builder strings.Builder
	builder.WriteString("Chapter(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", ChapterID=")
	builder.WriteString(c.ChapterID)
	builder.WriteString(", Num=")
	builder.WriteString(c.Num)
	builder.WriteByte(')')
	return builder.String()
}

// Chapters is a parsable slice of Chapter.
type Chapters []*Chapter

func (c Chapters) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
